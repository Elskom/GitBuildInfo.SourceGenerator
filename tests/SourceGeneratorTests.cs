namespace GitBuildInfo.SourceGenerator.Tests
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.CodeAnalysis.CSharp;
    using Microsoft.CodeAnalysis.Testing;
    using Microsoft.CodeAnalysis.Testing.Verifiers;
    using Xunit;

    public class SourceGeneratorTests
    {
        private const string generatedFile = "GitBuildInfo.SourceGenerator/GitBuildInfo.SourceGenerator.SourceGenerator/GitAssemblyInfo.g.cs";
        
#region C# 10 tests.
        [Fact]
        public async Task TestGeneratingDefaultNamespaceCSharp10()
        {
            await TestGeneratingDefaultNamespace(LanguageVersion.CSharp10).ConfigureAwait(false);
        }

        [Fact]
        public async Task TestGeneratingNoNamespaceCSharp10()
        {
            await TestGeneratingNoNamespace(LanguageVersion.CSharp10).ConfigureAwait(false);
        }

        [Fact]
        public async Task TestGeneratingCustomNamespaceCSharp10()
        {
            await TestGeneratingCustomNamespace(LanguageVersion.CSharp10).ConfigureAwait(false);
        }

        [Fact]
        public async Task TestGeneratingGenericCSharp10()
        {
            await TestGeneratingGeneric(LanguageVersion.CSharp10).ConfigureAwait(false);
        }
#endregion

#region C# 9 tests.
        [Fact]
        public async Task TestGeneratingDefaultNamespaceCSharp9()
        {
            await TestGeneratingDefaultNamespace().ConfigureAwait(false);
        }

        [Fact]
        public async Task TestGeneratingNoNamespaceCSharp9()
        {
            await TestGeneratingNoNamespace().ConfigureAwait(false);
        }

        [Fact]
        public async Task TestGeneratingCustomNamespaceCSharp9()
        {
            await TestGeneratingCustomNamespace().ConfigureAwait(false);
        }

        [Fact]
        public async Task TestGeneratingGenericCSharp9()
        {
            await TestGeneratingGeneric().ConfigureAwait(false);
        }
#endregion

        private static async Task TestGeneratingDefaultNamespace(LanguageVersion languageVersion = LanguageVersion.CSharp9)
        {
            await RunTest<CSGeneratorTest>(string.Empty, "Test", "false", languageVersion == LanguageVersion.CSharp10 ? @"// <autogenerated/>

[assembly: GitInformationAttribute(""fbgtgretgtre"", ""vfdbttregter"", ""vsdfvfdsv"", typeof(Test))]
" : @"// <autogenerated/>
using Elskom.Generic.Libs;

[assembly: GitInformationAttribute(""fbgtgretgtre"", ""vfdbttregter"", ""vsdfvfdsv"", typeof(Test))]
", @"namespace Elskom.Generic.Libs {
    internal static class Test
    {
        internal static object Dummy()
            => null;
    }
}", languageVersion, languageVersion == LanguageVersion.CSharp10 ? GetCSharp10Diagnostics("Test", otherEndColumn: 92) : GetDiagnostics()).ConfigureAwait(false);
        }

        private async Task TestGeneratingNoNamespace(LanguageVersion languageVersion = LanguageVersion.CSharp9)
        {
            await RunTest<CSGeneratorTest>(string.Empty, "Test", "false", languageVersion == LanguageVersion.CSharp10 ? @"// <autogenerated/>

[assembly: GitInformationAttribute(""fbgtgretgtre"", ""vfdbttregter"", ""vsdfvfdsv"", typeof(Test))]
" : @"// <autogenerated/>
using Elskom.Generic.Libs;

[assembly: GitInformationAttribute(""fbgtgretgtre"", ""vfdbttregter"", ""vsdfvfdsv"", typeof(Test))]
", @"namespace Elskom.Generic.Libs {
    internal static class Test
    {
        internal static object Dummy()
            => null;
    }
}", languageVersion, languageVersion == LanguageVersion.CSharp10 ? GetCSharp10Diagnostics("Test", otherEndColumn: 92) : GetDiagnostics()).ConfigureAwait(false);
        }

        private async Task TestGeneratingCustomNamespace(LanguageVersion languageVersion = LanguageVersion.CSharp9)
        {
            await RunTest<CSGeneratorTest>("TestNamespace", "Test", "false", languageVersion == LanguageVersion.CSharp10 ? @"// <autogenerated/>

[assembly: GitInformationAttribute(""fbgtgretgtre"", ""vfdbttregter"", ""vsdfvfdsv"", typeof(Test))]
": @"// <autogenerated/>
using Elskom.Generic.Libs;
using TestNamespace;

[assembly: GitInformationAttribute(""fbgtgretgtre"", ""vfdbttregter"", ""vsdfvfdsv"", typeof(Test))]
", @"namespace TestNamespace {
    internal static class Test
    {
        internal static object Dummy()
            => null;
    }
}", languageVersion, languageVersion == LanguageVersion.CSharp10 ? GetCSharp10Diagnostics("Test", otherEndColumn: 92) : GetGenericDiagnostics()).ConfigureAwait(false);
        }

        private async Task TestGeneratingGeneric(LanguageVersion languageVersion = LanguageVersion.CSharp9)
        {
            await RunTest<CSGeneratorTest>(string.Empty, "Test", "true", languageVersion == LanguageVersion.CSharp10 ? @"// <autogenerated/>

[assembly: GitInformationAttribute(""fbgtgretgtre"", ""vfdbttregter"", ""vsdfvfdsv"", typeof(Test<>))]
" : @"// <autogenerated/>
using Elskom.Generic.Libs;

[assembly: GitInformationAttribute(""fbgtgretgtre"", ""vfdbttregter"", ""vsdfvfdsv"", typeof(Test<>))]
", @"namespace Elskom.Generic.Libs {
    internal static class Test<T>
    {
        internal static object Dummy()
            => null;
    }
}", languageVersion, languageVersion == LanguageVersion.CSharp10 ? GetCSharp10Diagnostics("Test<>") : GetDiagnostics()).ConfigureAwait(false);
        }

        [Fact]
        public async Task TestGeneratingFailure()
        {
            await RunTest<CSGeneratorTest>(
                string.Empty,
                string.Empty,
                "false",
                string.Empty,
                string.Empty,
                expectedDiagnostics: new List<DiagnosticResult>
                {
                    new DiagnosticResult(GeneratorOptions.ValidationWarning).WithArguments("AssemblyType"),
                }).ConfigureAwait(false);
        }

        [Fact]
        public async Task TestVBGeneratingAbort()
        {
            await RunTest<VBGeneratorTest>(
                string.Empty,
                string.Empty,
                "false",
                string.Empty,
                string.Empty).ConfigureAwait(false);
        }

        // these diagnostics must be ignored because the Elskom.GitInformation project was moved.
        private static List<DiagnosticResult> GetDiagnostics(int startLine = 4, int startColumn = 12, int endLine = 4, int endColumn = 35)
            => new()
            {
                DiagnosticResult.CompilerError("CS0246").WithSpan(generatedFile, startLine, startColumn, endLine, endColumn).WithArguments("GitInformationAttribute"),
                DiagnosticResult.CompilerError("CS0246").WithSpan(generatedFile, startLine, startColumn, endLine, endColumn).WithArguments("GitInformationAttributeAttribute"),
            };

        // these diagnostics must be ignored because the Elskom.GitInformation project was moved.
        private static List<DiagnosticResult> GetCSharp10Diagnostics(string argument, int startLine = 3, int startColumn = 12, int endLine = 3, int endColumn = 35, int otherEndColumn = 94)
        {
            var expected = new List<DiagnosticResult>();
            expected.AddRange(GetDiagnostics(startLine, startColumn, endLine, endColumn));
            expected.Add(DiagnosticResult.CompilerError("CS0246").WithSpan(generatedFile, startLine, 88, endLine, otherEndColumn).WithArguments(argument));
            return expected;
        }

        // these diagnostics must be ignored because the Elskom.GitInformation project was moved.
        private static List<DiagnosticResult> GetGenericDiagnostics()
        {
            var originalDiagnostics = GetDiagnostics(5, endLine: 5);
            var result = new List<DiagnosticResult>
            {
                DiagnosticResult.CompilerError("CS0246").WithSpan(generatedFile, 2, 7, 2, 13).WithArguments("Elskom"),
            };
            result.AddRange(originalDiagnostics);
            return result;
        }

        private static async Task RunTest<TestType>(string rootNs, string assemblyType, string isGeneric, string generatedSource,
            string testSource, LanguageVersion languageVersion = LanguageVersion.CSharp9, List<DiagnosticResult>? expectedDiagnostics = null)
            where TestType : SourceGeneratorTest<XUnitVerifier>, IGeneratorTestBase, new()
        {
            var test = new TestType
            {
                GlobalOptions =
                {
                    ("build_property.RootNamespace", rootNs),
                    ("build_property.GitBuildInfoAssemblyType", assemblyType),
                    ("build_property.GitBuildInfoIsGeneric", isGeneric),
                },
                ReferenceAssemblies = ReferenceAssemblies.Net.Net50,
                TestState =
                {
                    Sources =
                    {
                        testSource
                    },
                    AdditionalFiles =
                    {
                        ("git_head.txt", "fbgtgretgtre"),
                        ("git_commit_hash.txt", "vfdbttregter"),
                        ("git_branch.txt", "vsdfvfdsv")
                    }
                },
            };
            if (expectedDiagnostics is not null)
            {
                test.ExpectedDiagnostics.AddRange(expectedDiagnostics);
            }

            if (test is CSGeneratorTest tst)
            {
                tst.LanguageVersion = languageVersion;
                test.TestState.GeneratedSources.Add(
                    (typeof(SourceGenerator), "GitAssemblyInfo.g.cs", generatedSource));
            }

            await test.RunAsync();
        }
    }
}
