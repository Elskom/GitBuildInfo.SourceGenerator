namespace GitBuildInfo.SourceGenerator.Tests
{
    using System;
    using System.Collections.Immutable;
    using System.Linq;
    using System.Threading;
    using GitBuildInfo.SourceGenerator;
    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.CSharp;
    using Microsoft.CodeAnalysis.Text;
    using Microsoft.CodeAnalysis.VisualBasic;
    using Xunit;

    public class SourceGeneratorTests
    {
        [Fact]
        public void TestGeneratingNonGeneric()
        {
            var result = DoTest("TestNamespace.Test", false, TestGenerate);
            Assert.Equal(@"// <autogenerated/>
using Elskom.Generic.Libs;
using TestNamespace;

[assembly: GitInformationAttribute(""fbgtgretgtre"", ""vfdbttregter"", ""vsdfvfdsv"", typeof(Test))]
", result);
        }

        [Fact]
        public void TestGeneratingGeneric()
        {
            var result = DoTest("TestNamespace.Test", true, TestGenerate);
            Assert.Equal(@"// <autogenerated/>
using Elskom.Generic.Libs;
using TestNamespace;

[assembly: GitInformationAttribute(""fbgtgretgtre"", ""vfdbttregter"", ""vsdfvfdsv"", typeof(Test<>))]
", result);
        }

        [Fact]
        public void TestGeneratingFailure()
            => Assert.Throws<InvalidOperationException>(
                () => DoTest(
                    null,
                    false,
                    TestGenerate));

        [Fact]
        public void TestVBGeneratingAbort()
        {
            var result = DoTest("TestNamespace.Test", false, TestGenerateVB);
            Assert.Equal(string.Empty, result);
        }

        [Fact]
        public void TestGenerateWithOnlyOptions()
        {
            var result = DoTest("TestNamespace.Test", TestGenerateSingle);
            Assert.Equal(string.Empty, result);
        }

        // the values on GitInfo are not valid in terms of results
        // that would normally be from git.
        private static string DoTest(string? assemblyType, bool generic, Func<string, string, string> func)
            => func.Invoke(
                $@"{{
  ""$schema"": ""https://raw.githubusercontent.com/Elskom/GitBuildInfo.SourceGenerator/main/settings.schema.json"",
  ""AssemblyType"": ""{assemblyType}"",
  ""IsGeneric"": {generic.ToString().ToLowerInvariant()},
}}",
                @"{
  ""GitHead"": ""fbgtgretgtre"",
  ""CommitHash"": ""vfdbttregter"",
  ""GitBranch"": ""vsdfvfdsv"",
}");

        private static string DoTest(string? assemblyType, Func<string, string> func)
            => func.Invoke($@"{{
  ""$schema"": ""https://raw.githubusercontent.com/Elskom/GitBuildInfo.SourceGenerator/main/settings.schema.json"",
  ""AssemblyType"": ""{assemblyType}"",
  ""IsGeneric"": false,
}}");

        private static string TestGenerate(string optionsText, string gitInfoText)
            => TestGenerateInternal(
                CreateCSharpCompilation(),
                ImmutableArray.Create<AdditionalText>(
                    new CustomAdditionalText("GitBuildInfo.json", optionsText),
                    new CustomAdditionalText("GitInfo.json", gitInfoText)));

        private static string TestGenerateSingle(string optionsText)
            => TestGenerateInternal(
                CreateCSharpCompilation(),
                ImmutableArray.Create<AdditionalText>(
                    new CustomAdditionalText("GitBuildInfo.json", optionsText)));

        private static string TestGenerateVB(string optionsText, string gitInfoText)
            => TestGenerateInternal(
                VisualBasicCompilation.Create(
                    "TestAssembly",
                    Array.Empty<SyntaxTree>(),
                    Array.Empty<MetadataReference>(),
                    new VisualBasicCompilationOptions(
                        OutputKind.DynamicallyLinkedLibrary)),
                ImmutableArray.Create<AdditionalText>(
                    new CustomAdditionalText("GitBuildInfo.json", optionsText),
                    new CustomAdditionalText("GitInfo.json", gitInfoText)));

        private static string TestGenerateInternal(Compilation compilation, ImmutableArray<AdditionalText> additionalTexts)
        {
            var driver = CSharpGeneratorDriver.Create(new SourceGenerator()).AddAdditionalTexts(additionalTexts);
            _ = driver.RunGeneratorsAndUpdateCompilation(
                compilation,
                out var outputCompilation,
                out var generateDiagnostics);
            Assert.False(
                generateDiagnostics.Any(d => d.Severity == DiagnosticSeverity.Error),
                $"Failed: {generateDiagnostics.FirstOrDefault()?.GetMessage()}");
            try
            {
                return outputCompilation.SyntaxTrees.Last().ToString();
            }
            catch (InvalidOperationException) when (compilation is VisualBasicCompilation || additionalTexts.Count() is 1)
            {
                return string.Empty;
            }
        }

        private static Compilation CreateCSharpCompilation()
            => CSharpCompilation.Create(
                "TestAssembly",
                Array.Empty<SyntaxTree>(),
                Array.Empty<MetadataReference>(),
                new CSharpCompilationOptions(
                    OutputKind.DynamicallyLinkedLibrary));

        private class CustomAdditionalText : AdditionalText
        {
            private readonly string _text;

            public override string Path { get; }

            public CustomAdditionalText(string path, string text)
            {
                Path = path;
                _text = text;
            }

            public override SourceText? GetText(CancellationToken cancellationToken = default)
            {
                cancellationToken.ThrowIfCancellationRequested();
                return SourceText.From(_text);
            }
        }
    }
}
