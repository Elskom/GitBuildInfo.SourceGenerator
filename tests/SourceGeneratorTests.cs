namespace GitBuildInfo.SourceGenerator.Tests
{
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.CodeAnalysis.Testing;
    using Microsoft.CodeAnalysis.Testing.Verifiers;
    using Xunit;

    public class SourceGeneratorTests
    {
        private const string generatedFile = "GitBuildInfo.SourceGenerator/GitBuildInfo.SourceGenerator.SourceGenerator/GitAssemblyInfo.g.cs";

        [Fact]
        public async Task TestGeneratingDefaultNamespace()
        {
            await RunTest<CSGeneratorTest>("Elskom.Generic.Libs.Test", "false", @"// <autogenerated/>
using Elskom.Generic.Libs;

[assembly: GitInformationAttribute(""fbgtgretgtre"", ""vfdbttregter"", ""vsdfvfdsv"", typeof(Test))]
", @"namespace Elskom.Generic.Libs {
    internal static class Test
    {
        internal static object Dummy()
            => null;
    }
}", GetDiagnostics()).ConfigureAwait(false);
        }

        [Fact]
        public async Task TestGeneratingNoNamespace()
        {
            await RunTest<CSGeneratorTest>("Test", "false", @"// <autogenerated/>
using Elskom.Generic.Libs;

[assembly: GitInformationAttribute(""fbgtgretgtre"", ""vfdbttregter"", ""vsdfvfdsv"", typeof(Test))]
", @"namespace Elskom.Generic.Libs {
    internal static class Test
    {
        internal static object Dummy()
            => null;
    }
}", GetDiagnostics()).ConfigureAwait(false);
        }

        [Fact]
        public async Task TestGeneratingCustomNamespace()
        {
            await RunTest<CSGeneratorTest>("TestNamespace.Test", "false", @"// <autogenerated/>
using Elskom.Generic.Libs;
using TestNamespace;

[assembly: GitInformationAttribute(""fbgtgretgtre"", ""vfdbttregter"", ""vsdfvfdsv"", typeof(Test))]
", @"namespace TestNamespace {
    internal static class Test
    {
        internal static object Dummy()
            => null;
    }
}", GetGenericDiagnostics()).ConfigureAwait(false);
        }

        [Fact]
        public async Task TestGeneratingGeneric()
        {
            await RunTest<CSGeneratorTest>("Test", "true", @"// <autogenerated/>
using Elskom.Generic.Libs;

[assembly: GitInformationAttribute(""fbgtgretgtre"", ""vfdbttregter"", ""vsdfvfdsv"", typeof(Test<>))]
", @"namespace Elskom.Generic.Libs {
    internal static class Test<T>
    {
        internal static object Dummy()
            => null;
    }
}", GetDiagnostics()).ConfigureAwait(false);
        }

        [Fact]
        public async Task TestGeneratingFailure()
        {
            await RunTest<CSGeneratorTest>(
                string.Empty,
                "false",
                string.Empty,
                string.Empty,
                new List<DiagnosticResult>
                {
                    new DiagnosticResult(GeneratorOptions.ValidationWarning).WithArguments("AssemblyType"),
                }).ConfigureAwait(false);
        }

        [Fact]
        public async Task TestVBGeneratingAbort()
        {
            await RunTest<VBGeneratorTest>(
                string.Empty,
                "false",
                string.Empty,
                string.Empty).ConfigureAwait(false);
        }

        // these diagnostics must be ignored because the Elskom.GitInformation project was moved.
        private static List<DiagnosticResult> GetDiagnostics(int startLine = 4, int startColumn = 12, int endLine = 4, int endColumn = 35)
            => new()
            {
                DiagnosticResult.CompilerError("CS0246").WithSpan(generatedFile, startLine, startColumn, endLine, endColumn).WithArguments("GitInformationAttribute"),
                DiagnosticResult.CompilerError("CS0246").WithSpan(generatedFile, startLine, startColumn, endLine, endColumn).WithArguments("GitInformationAttributeAttribute"),
            };

        // these diagnostics must be ignored because the Elskom.GitInformation project was moved.
        private static List<DiagnosticResult> GetGenericDiagnostics()
        {
            var originalDiagnostics = GetDiagnostics(5, endLine: 5);
            var result = new List<DiagnosticResult>
            {
                DiagnosticResult.CompilerError("CS0246").WithSpan(generatedFile, 2, 7, 2, 13).WithArguments("Elskom"),
            };
            result.AddRange(originalDiagnostics);
            return result;
        }

        private static async Task RunTest<TestType>(string assemblyType, string isGeneric, string generatedSource,
            string testSource, List<DiagnosticResult>? expectedDiagnostics = null)
            where TestType : SourceGeneratorTest<XUnitVerifier>, IGeneratorTestBase, new()
        {
            var test = new TestType
            {
                GlobalOptions =
                {
                    ("build_property.GitBuildInfoAssemblyType", assemblyType),
                    ("build_property.GitBuildInfoIsGeneric", isGeneric),
                    ("build_property.GitHead", "fbgtgretgtre"),
                    ("build_property.CommitHash", "vfdbttregter"),
                    ("build_property.GitBranch", "vsdfvfdsv"),
                },
                ReferenceAssemblies = ReferenceAssemblies.Net.Net50,
                TestState =
                {
                    Sources =
                    {
                        testSource
                    },
                },
            };
            if (expectedDiagnostics is not null)
            {
                test.ExpectedDiagnostics.AddRange(expectedDiagnostics);
            }

            if (test is not VBGeneratorTest)
            {
                test.TestState.GeneratedSources.Add(
                    (typeof(SourceGenerator), "GitAssemblyInfo.g.cs", generatedSource));
            }

            await test.RunAsync();
        }
    }
}
